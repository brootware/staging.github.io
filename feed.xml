<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://brootware.github.io/</id><title>(B)rootware Research</title><subtitle>A blog for CTF writeups, Cyber Security &amp; Defense (Blue) Team Techniques, other side projects and research by Oaker Min (Bruce).</subtitle> <updated>2023-06-29T09:30:38+08:00</updated> <author> <name>Oaker Min (Bruce)</name> <uri>https://brootware.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://brootware.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://brootware.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> ¬© 2023 Oaker Min (Bruce) </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Configuring Wsl2 for Vagrant and Virtualbox on Windows</title><link href="https://brootware.github.io/posts/configuring-wsl2-for-vagrant-and-virtualbox-on-windows/" rel="alternate" type="text/html" title="Configuring Wsl2 for Vagrant and Virtualbox on Windows" /><published>2023-06-29T09:28:00+08:00</published> <updated>2023-06-29T09:28:00+08:00</updated> <id>https://brootware.github.io/posts/configuring-wsl2-for-vagrant-and-virtualbox-on-windows/</id> <content src="https://brootware.github.io/posts/configuring-wsl2-for-vagrant-and-virtualbox-on-windows/" /> <author> <name>Oaker Min (Bruce)</name> </author> <category term="Projects" /> <category term="Automation" /> <summary> Introduction I have recently moved back to using windows as the new apple M1 and M2 chips are not compatible with running vagrant and virtualbox. As someone who likes to run labs locally without breaking the bank spending a lot on Apple hardware. I had to find alternatives and being a mac user since 2018, I was overwhelmed with options avaialble in Windows ecosystem. I came across Lenovo‚Äôs Thin... </summary> </entry> <entry><title>EchoCTF: The Fake Binary Bypass Writeup ‚öôÔ∏è üõ†</title><link href="https://brootware.github.io/posts/echoctf-the-fake-binary-bypass-writeup/" rel="alternate" type="text/html" title="EchoCTF: The Fake Binary Bypass Writeup ‚öôÔ∏è üõ†" /><published>2022-08-11T19:37:00+08:00</published> <updated>2022-08-11T19:37:00+08:00</updated> <id>https://brootware.github.io/posts/echoctf-the-fake-binary-bypass-writeup/</id> <content src="https://brootware.github.io/posts/echoctf-the-fake-binary-bypass-writeup/" /> <author> <name>Oaker Min (Bruce)</name> </author> <category term="CTF" /> <category term="Binary-Exploitation" /> <summary> Summary It has been a while last I did an online CTF. So this entry is a refresher on my knowledge of binary analysis. We are given a binary file to analyze and find the flags. The challenges were pretty simple. Simple enumerations on the given binary file would lead you to flags. So let‚Äôs jump in! Ident flag from this binary Lets start with the easy part, analyze the binary and answer what... </summary> </entry> <entry><title>Regex performance in golang and rust. Which is faster? ü§î</title><link href="https://brootware.github.io/posts/regex-performance-in-golang-and-rust-which-is-faster/" rel="alternate" type="text/html" title="Regex performance in golang and rust. Which is faster? ü§î" /><published>2022-07-23T20:31:00+08:00</published> <updated>2022-07-24T07:56:51+08:00</updated> <id>https://brootware.github.io/posts/regex-performance-in-golang-and-rust-which-is-faster/</id> <content src="https://brootware.github.io/posts/regex-performance-in-golang-and-rust-which-is-faster/" /> <author> <name>Oaker Min (Bruce)</name> </author> <category term="Projects" /> <category term="regex-benchmarking" /> <summary> Introduction In the previous blog entry, we looked at the implementation details of PyRedactKit for improving performance, reducing code smells by refactoring, Using automated testing and code scanning with Github Actions. The heart of the cli app is working with regular expressions to identify any sensitive data are found in the ascii text files and mask them if any. The initial constraint... </summary> </entry> <entry><title>Sensitive data redaction/unredaction tool - PyRedactKit üß∞üîêüìù</title><link href="https://brootware.github.io/posts/sensitive-data-redaction-pyredactkit/" rel="alternate" type="text/html" title="Sensitive data redaction/unredaction tool - PyRedactKit üß∞üîêüìù" /><published>2022-05-19T16:18:00+08:00</published> <updated>2022-08-11T09:33:18+08:00</updated> <id>https://brootware.github.io/posts/sensitive-data-redaction-pyredactkit/</id> <content src="https://brootware.github.io/posts/sensitive-data-redaction-pyredactkit/" /> <author> <name>Oaker Min (Bruce)</name> </author> <category term="Projects" /> <category term="security-toolkit" /> <summary> Introduction Check out the project here! To start using: pip install --upgrade pyredactkit &amp;amp;&amp;amp; prk There are a lot of open-source cyber security tools that help automate a lot of the tasks on the Red team/PT side of things like domain enumeration, network scanning, etc. When I searched for a Blue team/defense-focused tool for security and privacy especially redacting data, I c... </summary> </entry> <entry><title>Cyber League CTF 2022 - Writeups üö©</title><link href="https://brootware.github.io/posts/cyber-league-ctf-2022-writeups/" rel="alternate" type="text/html" title="Cyber League CTF 2022 - Writeups üö©" /><published>2022-05-02T10:16:00+08:00</published> <updated>2022-05-03T08:49:23+08:00</updated> <id>https://brootware.github.io/posts/cyber-league-ctf-2022-writeups/</id> <content src="https://brootware.github.io/posts/cyber-league-ctf-2022-writeups/" /> <author> <name>Oaker Min (Bruce)</name> </author> <category term="CTF" /> <category term="Web-exploitation" /> <summary> Didn‚Äôt really have much time to tackle a lot of the challenges with this CTF and only managed to pwn 3 of them. A big shoutout to my team mates Mocha and Dante for a lot of initial enumerations! I just mainly followed their leads üòÖ Simulated bomb drill This is the first challenge for the web category in cyber league‚Äôs CTF. A web endpoint is given for us to start enumerating. When you firs... </summary> </entry> </feed>
